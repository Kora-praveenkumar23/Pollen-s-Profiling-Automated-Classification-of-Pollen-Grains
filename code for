<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CNN Image Predictor</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font for a clean look */
        body {
            font-family: "Inter", sans-serif;
            background-color: #f0f2f5; /* Light grey background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh; /* Full viewport height */
            margin: 0;
        }
        .container {
            background-color: #ffffff; /* White card background */
            padding: 2.5rem; /* Increased padding */
            border-radius: 1.5rem; /* More rounded corners */
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); /* Softer shadow */
            max-width: 90%; /* Responsive max width */
            width: 500px; /* Fixed width on larger screens */
            text-align: center;
            border: 1px solid #e0e0e0; /* Subtle border */
        }
        .input-file-container {
            position: relative;
            margin-bottom: 1.5rem;
        }
        .input-file {
            width: 0.1px;
            height: 0.1px;
            opacity: 0;
            overflow: hidden;
            position: absolute;
            z-index: -1;
        }
        .input-file + label {
            font-size: 1rem;
            font-weight: 600;
            color: #fff;
            background-color: #4CAF50; /* Green button */
            display: inline-block;
            cursor: pointer;
            padding: 0.75rem 1.5rem; /* Generous padding */
            border-radius: 0.75rem; /* Rounded button corners */
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3); /* Green shadow */
            border: none;
        }
        .input-file:focus + label,
        .input-file + label:hover {
            background-color: #45a049; /* Darker green on hover/focus */
            transform: translateY(-2px); /* Slight lift effect */
        }
        .input-file-alt + label {
            background-color: #007bff; /* Blue for 'Upload Image' */
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.3);
        }
        .input-file-alt:focus + label,
        .input-file-alt + label:hover {
            background-color: #0056b3; /* Darker blue */
        }
        .message-box {
            background-color: #e6f7ff; /* Light blue background */
            border: 1px solid #91d5ff; /* Blue border */
            color: #004085; /* Dark blue text */
            padding: 1rem;
            border-radius: 0.75rem;
            margin-top: 1.5rem;
            text-align: left;
            word-wrap: break-word; /* Ensure long messages break */
        }
        .message-box.error {
            background-color: #ffe6e6;
            border-color: #ff9191;
            color: #850000;
        }
        .image-preview {
            max-width: 100%;
            max-height: 200px;
            object-fit: contain; /* Ensure the image fits without cropping */
            margin: 1rem auto;
            border-radius: 0.75rem;
            border: 1px solid #e0e0e0;
            display: block; /* Center the image */
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="container bg-white p-10 rounded-2xl shadow-xl border border-gray-200">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">CNN Image Predictor</h1>

        <div class="input-file-container">
            <input type="file" name="file" id="file-upload" class="input-file input-file-alt" accept="image/*">
            <label for="file-upload">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" viewBox="0 0 20 17" class="inline-block mr-2 align-middle">
                    <path fill="#fff" d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"/>
                </svg>
                <span>Choose an image...</span>
            </label>
        </div>

        <img id="image-preview" class="image-preview hidden" src="#" alt="Image Preview">

        <button id="upload-button" class="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-xl transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300" disabled>
            Analyze Image
        </button>

        <div id="loading-indicator" class="mt-4 text-blue-600 hidden">
            <div class="flex items-center justify-center">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Processing...
            </div>
        </div>

        <div id="message-box" class="message-box mt-6 hidden"></div>
    </div>

    <script>
        const fileUpload = document.getElementById('file-upload');
        const uploadButton = document.getElementById('upload-button');
        const imagePreview = document.getElementById('image-preview');
        const messageBox = document.getElementById('message-box');
        const loadingIndicator = document.getElementById('loading-indicator');
        const fileUploadLabel = document.querySelector('.input-file + label span');

        // Event listener for file input change
        fileUpload.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                // Update label text with file name
                fileUploadLabel.textContent = file.name;
                // Enable upload button
                uploadButton.disabled = false;
                // Show image preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    imagePreview.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
                // Clear any previous messages
                messageBox.classList.add('hidden');
            } else {
                // Reset if no file is chosen
                fileUploadLabel.textContent = 'Choose an image...';
                uploadButton.disabled = true;
                imagePreview.classList.add('hidden');
                imagePreview.src = '#';
                messageBox.classList.add('hidden');
            }
        });

        // Event listener for upload button click
        uploadButton.addEventListener('click', async function() {
            const file = fileUpload.files[0];
            if (!file) {
                showMessage('Please select an image first.', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            // Show loading indicator
            loadingIndicator.classList.remove('hidden');
            uploadButton.disabled = true; // Disable button during processing

            try {
                const response = await fetch('/predict', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();

                // Hide loading indicator
                loadingIndicator.classList.add('hidden');
                uploadButton.disabled = false; // Re-enable button

                if (response.ok) {
                    showMessage(`Prediction: Class ${result.prediction} with ${result.confidence.toFixed(2)}% confidence.`, 'success');
                } else {
                    showMessage(`Error: ${result.error || 'Failed to get prediction.'}`, 'error');
                }
            } catch (error) {
                // Hide loading indicator
                loadingIndicator.classList.add('hidden');
                uploadButton.disabled = false; // Re-enable button
                console.error('Error:', error);
                showMessage('An unexpected error occurred. Please try again.', 'error');
            }
        });

        /**
         * Displays a message in the message box.
         * @param {string} message - The message to display.
         * @param {'success'|'error'} type - The type of message (influences styling).
         */
        function showMessage(message, type) {
            messageBox.textContent = message;
            messageBox.classList.remove('hidden', 'success', 'error');
            if (type === 'error') {
                messageBox.classList.add('error');
            } else {
                messageBox.classList.remove('error'); // Ensure error class is removed for success
            }
            messageBox.classList.remove('hidden');
        }
    </script>
</body>
</html>
